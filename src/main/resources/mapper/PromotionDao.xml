<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.shopec.dao.PromotionDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="net.shopec.entity.Promotion">
	    <result column="id" property="id" />
	    <result column="version" property="version" />
        <result column="created_date" property="createdDate" />
        <result column="last_modified_date" property="lastModifiedDate" />
        <result column="orders" property="order" />
        <result column="begin_date" property="beginDate" />
        <result column="end_date" property="endDate" />
        <result column="image" property="image" />
        <result column="introduction" property="introduction" />
        <result column="is_coupon_allowed" property="isCouponAllowed" />
        <result column="is_enabled" property="isEnabled" />
        <result column="name" property="name" />
        <result column="promotion_plugin_id" property="promotionPluginId" />
        <association property="store" select="net.shopec.dao.StoreDao.find" column="store_id" javaType="net.shopec.entity.Store" fetchType="lazy"/>
        <association property="promotionDefaultAttribute" select="net.shopec.dao.PromotionDefaultAttributeDao.findByAttribute" column="{attributeName=promotion_id, attributeValue=id}" javaType="net.shopec.entity.PromotionDefaultAttribute" fetchType="lazy"/>
        <collection property="memberRanks" select="net.shopec.dao.MemberRankDao.findSet" column="{attributeName=promotion_id, attributeValue=id}" ofType="net.shopec.entity.MemberRank" fetchType="lazy"/>
        <collection property="products" select="net.shopec.dao.ProductDao.findSet" column="{attributeName=promotion_id, attributeValue=id}" ofType="net.shopec.entity.Product" fetchType="lazy"/>
        <collection property="productCategories" select="net.shopec.dao.ProductCategoryDao.findSet" column="{attributeName=promotion_id, attributeValue=id}" ofType="net.shopec.entity.ProductCategory" fetchType="lazy"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        promotion.id,
        promotion.version,
        promotion.created_date, promotion.last_modified_date, promotion.orders, promotion.begin_date, promotion.end_date, promotion.image, promotion.introduction, promotion.is_coupon_allowed, promotion.is_enabled, promotion.name, promotion.promotion_plugin_id, promotion.store_id, 'promotion_id'
    </sql>
	
	<!-- 查找实体对象 -->
	<select id="find" parameterType="java.lang.Long" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		WHERE
			`id` = #{id}
	</select>
	
	<!-- 查找所有实体对象集合 -->
	<select id="findAll" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM 
			`promotion` promotion
	</select>
	
	<!-- 查找实体对象集合 -->
	<select id="findSet" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		<choose>
			<when test="attributeName == 'product_category_id'">
				LEFT JOIN `product_category_promotion` ON id = promotions_id
				WHERE
					product_categories_id = #{attributeValue}
			</when>
			<when test="attributeName == 'product_id'">
				LEFT JOIN `product_promotion` ON id = promotions_id
				WHERE
					products_id = #{attributeValue}
			</when>
			<when test="attributeName == 'member_rank_id'">
				LEFT JOIN `promotion_member_rank` ON id = promotions_id
				WHERE
					member_ranks_id = #{attributeValue}
			</when>
			<when test="attributeName == 'sku_id'">
				LEFT JOIN `promotion_default_attribute_sku` ON id = gift_attributes_id
				WHERE
					gifts_id = #{attributeValue}
			</when>
			<otherwise>
				WHERE
					${attributeName} = #{attributeValue}
			</otherwise>
		</choose>
		ORDER BY orders ASC
	</select>
	
	<!-- 查找促销 -->
	<select id="findList" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		<where>
			<if test="store != null">
				AND store_id = #{store.id}
			</if>
			<if test="promotionPlugin != null and promotionPlugin.id != null">
				AND type = #{promotionPlugin.id}
			</if>
			<if test="isEnabled != null">
				AND is_enabled = #{isEnabled}
			</if>
		</where>
	</select>
	
	<!-- 查找促销 -->
	<select id="selectList" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		INNER JOIN `promotion_member_rank` promotionMemberRank ON promotion.id = promotionMemberRank.promotions_id
		INNER JOIN `member_rank` memberRank ON promotionMemberRank.member_ranks_id = memberRank.id
		INNER JOIN `product_category_promotion` productCategoryPromotion ON promotion.id = productCategoryPromotion.promotions_id
		INNER JOIN `product_category` productCategory ON productCategoryPromotion.product_categories_id = productCategory.id
		<where>
			<if test="store != null">
				AND store_id = #{store.id}
			</if>
			<if test="promotionPlugin != null">
				AND promotion_plugin_id = #{promotionPlugin.id}
			</if>
			<if test="memberRank != null">
				AND memberRank.id = #{memberRank.id}
			</if>
			<if test="productCategory != null">
				AND productCategory.id = #{productCategory.id}
			</if>
			<if test="hasBegun != null">
				<if test="hasBegun == true">
					AND (promotion.begin_date IS NULL OR promotion.begin_date <![CDATA[ <= ]]> NOW() )
				</if>
				<if test="hasBegun == false">
					AND(promotion0_.beginDate IS NOT NULL)
					AND promotion0_.beginDate <![CDATA[ > ]]> NOW()
				</if>
			</if>
			<if test="hasEnded != null">	
				<if test="hasEnded == true">
					AND(promotion.end_date IS NOT NULL) 
					AND promotion.end_date <![CDATA[ <= ]]> NOW()
				</if>
				<if test="hasEnded == false">
					AND (promotion.end_date IS NULL OR promotion.end_date <![CDATA[ > ]]> NOW())
				</if>
			</if>
			${ew.sqlSegment}
		</where>
	</select>
	
	<!-- 查找实体对象分页 -->
	<select id="selectPage" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		LEFT JOIN `store` store ON promotion.`store_id` = store.`id`
		<if test="ew.nonEmptyOfWhere == true">
			WHERE
		</if>
		${ew.sqlSegment}
	</select>
	
	<!-- 通过名称查找促销 -->
	<select id="search" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		WHERE name LIKE concat('%', #{keyword}, '%')
		<if test="excludes != null and excludes.size > 0 ">
			AND id NOT IN
			<foreach collection="excludes" item="exclude" open="(" separator="," close=")" >
	        	#{exclude.id}
	        </foreach>
		</if>
		<if test="count != null">
			LIMIT 0, ${count}
		</if>
	</select>
	
	<!-- 查找促销 -->
	<select id="findPage" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`promotion` promotion
		LEFT JOIN `store` store ON promotion.`store_id` = store.`id`
		<where>
			<if test="store != null">
				AND store_id = #{store.id}
			</if>
			<if test="promotionPlugin != null and promotionPlugin.id != null">
				AND promotion_plugin_id = #{promotionPlugin.id}
			</if>
			<if test="ew.nonEmptyOfWhere == true">
				AND
			</if>
			${ew.sqlSegment}
		</where>
	</select>
	
	<!-- 保存 -->
	<insert id="save" parameterType="net.shopec.entity.Promotion">
    	INSERT INTO promotion(
			id ,
			created_date ,
			version ,
			orders ,
			begin_date ,
			end_date ,
			image ,
			is_coupon_allowed ,
			is_enabled ,
			`name` ,
			promotion_plugin_id ,
			store_id ,
			introduction
		) VALUES (
			#{entity.id}, 
			#{entity.createdDate}, 
			#{entity.version}, 
			#{entity.order}, 
			#{entity.beginDate}, 
			#{entity.endDate}, 
			#{entity.image}, 
			#{entity.isCouponAllowed}, 
			#{entity.isEnabled}, 
			#{entity.name}, 
			#{entity.promotionPluginId}, 
			#{entity.store.id}, 
			#{entity.introduction}
		);
		
		<!-- 促销与会员等级 -->
		<if test="entity.memberRanks != null and entity.memberRanks.size > 0">
			 INSERT INTO promotion_member_rank (promotions_id , member_ranks_id) VALUES
			<foreach collection="entity.memberRanks" item="memberRank" index="index" separator="," close=";">
				(#{entity.id}, #{memberRank.id})
			</foreach>
		</if>
  	</insert>
  
	<!-- 更新 -->
	<update id="update" parameterType="net.shopec.entity.Promotion">
   		UPDATE promotion
		SET last_modified_date = #{entity.lastModifiedDate},
			version = #{entity.version} + 1,
			orders = #{entity.order},
			begin_date = #{entity.beginDate},
			end_date = #{entity.endDate},
			image = #{entity.image},
			is_coupon_allowed = #{entity.isCouponAllowed},
			is_enabled = #{entity.isEnabled},
			`name` = #{entity.name},
			promotion_plugin_id = #{entity.promotionPluginId},
			store_id = #{entity.store.id},
			introduction = #{entity.introduction}
		WHERE
			id = #{entity.id}
		AND version = #{entity.version}
  	</update>
	
	<!-- 移除 -->
	<delete id="delete" parameterType="java.util.List">
		<!-- 促销与赠品关联表 -->
		DELETE FROM `promotion_default_attribute_sku` WHERE gift_attributes_id IN (SELECT id FROM `promotion_default_attribute` WHERE promotion_id IN
		<foreach collection="ids" item="id" open="(" separator="," close="));">
			#{id}
		</foreach>
		
		<!-- 促销默认属性 -->
		DELETE FROM `promotion_default_attribute` WHERE promotion_id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
		
		<!-- 促销与会员等级 -->
		DELETE FROM `promotion_member_rank` WHERE promotions_id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
		
		<!-- 促销 -->
		DELETE FROM `promotion` WHERE id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
	</delete>
	
</mapper>
